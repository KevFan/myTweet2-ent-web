{
  "stats": {
    "suites": 3,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2017-11-05T18:03:08.572Z",
    "end": "2017-11-05T18:03:23.261Z",
    "duration": 14689,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Admin API tests",
        "suites": [],
        "tests": [
          {
            "title": "get admins",
            "fullTitle": "Admin API tests get admins",
            "timedOut": false,
            "duration": 519,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/admins';\n    const res = request('GET', url);\n    const admins = JSON.parse(res.getBody('utf8'));\n    assert.equal(2, admins.length);\n    assert.equal(admins[0].firstName, 'Admin');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    assert.equal(admins[1].firstName, 'Grandpa');\n    assert.equal(admins[1].lastName, 'Simpson');\n    assert.equal(admins[1].email, 'grandpa@simpson.com');\n    assert.equal(admins[1].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "1a00647e-7e38-4ebb-b119-e572aef8c92a",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one admin",
            "fullTitle": "Admin API tests get one admin",
            "timedOut": false,
            "duration": 708,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "0e49d393-d121-48e9-9ce9-56d74ccdc605",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create an admin",
            "fullTitle": "Admin API tests create an admin",
            "timedOut": false,
            "duration": 356,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const adminsUrl = 'http://localhost:4000/api/admins';\n    const newAdmin = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', adminsUrl, { json: newAdmin });\n    const returnedAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedAdmin.firstName, 'Kevin');\n    assert.equal(returnedAdmin.lastName, 'Fan');\n    assert.equal(returnedAdmin.email, 'kevintest@email.com');\n    assert.equal(returnedAdmin.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "4aec9b9e-0564-4051-8f4e-04516e0a9b84",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "update an admin",
            "fullTitle": "Admin API tests update an admin",
            "timedOut": false,
            "duration": 1065,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');\n    oneAdmin.firstName = 'Update';\n    const updateUserUrl = allAdminsUrl + '/' + oneAdmin._id;\n    res = request('PUT', updateUserUrl, { json: oneAdmin });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'admin@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "5e170330-89ca-4337-94c4-ca007a991f98",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete an admin",
            "fullTitle": "Admin API tests delete an admin",
            "timedOut": false,
            "duration": 1065,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(admins[0].firstName, 'Update');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAnAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    request('DELETE', deleteAnAdminUrl);\n    // Get new list of all users\n    const newAllAdminList = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    // Should have 2 admins remaining due to one created at post test\n    assert.equal(2, newAllAdminList.length);\n    assert.equal(newAllAdminList[0].firstName, 'Grandpa');\n    assert.equal(newAllAdminList[0].lastName, 'Simpson');\n    assert.equal(newAllAdminList[0].email, 'grandpa@simpson.com');\n    assert.equal(newAllAdminList[0].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "f55e8287-432c-4082-a143-b8ccac7f3db7",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all admins",
            "fullTitle": "Admin API tests delete all admins",
            "timedOut": false,
            "duration": 1043,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the admins\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first admin is currently Grandpa after deleting Admin\n    assert.equal(admins[0].firstName, 'Grandpa');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'grandpa@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete all admins\n    request('DELETE', allAdminsUrl);\n    // Get new list of all admins\n    const newListOfAdmins = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    assert.equal(0, newListOfAdmins.length);",
            "err": {},
            "isRoot": false,
            "uuid": "c45e26e7-656c-4e15-ad2d-aa46ecd40540",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "\\test\\adminapitest.js",
        "uuid": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "E:\\dev\\workspaceWebStorm\\enterprise-web-dev-assign1\\test\\adminapitest.js",
        "passes": [
          {
            "title": "get admins",
            "fullTitle": "Admin API tests get admins",
            "timedOut": false,
            "duration": 519,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/admins';\n    const res = request('GET', url);\n    const admins = JSON.parse(res.getBody('utf8'));\n    assert.equal(2, admins.length);\n    assert.equal(admins[0].firstName, 'Admin');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    assert.equal(admins[1].firstName, 'Grandpa');\n    assert.equal(admins[1].lastName, 'Simpson');\n    assert.equal(admins[1].email, 'grandpa@simpson.com');\n    assert.equal(admins[1].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "1a00647e-7e38-4ebb-b119-e572aef8c92a",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one admin",
            "fullTitle": "Admin API tests get one admin",
            "timedOut": false,
            "duration": 708,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "0e49d393-d121-48e9-9ce9-56d74ccdc605",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create an admin",
            "fullTitle": "Admin API tests create an admin",
            "timedOut": false,
            "duration": 356,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const adminsUrl = 'http://localhost:4000/api/admins';\n    const newAdmin = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', adminsUrl, { json: newAdmin });\n    const returnedAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedAdmin.firstName, 'Kevin');\n    assert.equal(returnedAdmin.lastName, 'Fan');\n    assert.equal(returnedAdmin.email, 'kevintest@email.com');\n    assert.equal(returnedAdmin.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "4aec9b9e-0564-4051-8f4e-04516e0a9b84",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "update an admin",
            "fullTitle": "Admin API tests update an admin",
            "timedOut": false,
            "duration": 1065,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');\n    oneAdmin.firstName = 'Update';\n    const updateUserUrl = allAdminsUrl + '/' + oneAdmin._id;\n    res = request('PUT', updateUserUrl, { json: oneAdmin });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'admin@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "5e170330-89ca-4337-94c4-ca007a991f98",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete an admin",
            "fullTitle": "Admin API tests delete an admin",
            "timedOut": false,
            "duration": 1065,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(admins[0].firstName, 'Update');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAnAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    request('DELETE', deleteAnAdminUrl);\n    // Get new list of all users\n    const newAllAdminList = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    // Should have 2 admins remaining due to one created at post test\n    assert.equal(2, newAllAdminList.length);\n    assert.equal(newAllAdminList[0].firstName, 'Grandpa');\n    assert.equal(newAllAdminList[0].lastName, 'Simpson');\n    assert.equal(newAllAdminList[0].email, 'grandpa@simpson.com');\n    assert.equal(newAllAdminList[0].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "f55e8287-432c-4082-a143-b8ccac7f3db7",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all admins",
            "fullTitle": "Admin API tests delete all admins",
            "timedOut": false,
            "duration": 1043,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the admins\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first admin is currently Grandpa after deleting Admin\n    assert.equal(admins[0].firstName, 'Grandpa');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'grandpa@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete all admins\n    request('DELETE', allAdminsUrl);\n    // Get new list of all admins\n    const newListOfAdmins = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    assert.equal(0, newListOfAdmins.length);",
            "err": {},
            "isRoot": false,
            "uuid": "c45e26e7-656c-4e15-ad2d-aa46ecd40540",
            "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4756,
        "rootEmpty": false
      },
      {
        "title": "Tweet API tests",
        "suites": [],
        "tests": [
          {
            "title": "get tweets",
            "fullTitle": "Tweet API tests get tweets",
            "timedOut": false,
            "duration": 343,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(3, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[2].tweetText, 'Third Tweet Test');\nassert.equal(tweets[2].tweetDate, '2017-09-16T20:54:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "61210418-8d52-4981-ac9e-235c1a9fedb3",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one tweet",
            "fullTitle": "Tweet API tests get one tweet",
            "timedOut": false,
            "duration": 682,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    const oneTweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    res = request('GET', oneTweetUrl);\n    const oneTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneTweet.tweetText, 'First Tweet Test');\n    assert.equal(oneTweet.tweetDate, '2017-07-31T22:04:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "53a04df6-0354-4d1a-ac4a-fedea61b2076",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get all user tweets",
            "fullTitle": "Tweet API tests get all user tweets",
            "timedOut": false,
            "duration": 684,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[1].tweetUser, users[0]._id);",
            "err": {},
            "isRoot": false,
            "uuid": "abeaad89-4508-4a2e-a2f5-0eecff49b4d6",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create a tweet",
            "fullTitle": "Tweet API tests create a tweet",
            "timedOut": false,
            "duration": 344,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const tweetsUrl = 'http://localhost:4000/api/tweets';\n    const newTweet = {\n      tweetText: 'Testing Api',\n      tweetDate: '2017-11-01T11:07:00.000Z',\n    };\n    const res = request('POST', tweetsUrl, { json: newTweet });\n    const returnedTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedTweet.tweetText, 'Testing Api');\n    assert.equal(returnedTweet.tweetDate, '2017-11-01T11:07:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "f7eb61e9-6b11-4209-8607-f00f7205634a",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete a tweet",
            "fullTitle": "Tweet API tests delete a tweet",
            "timedOut": false,
            "duration": 1013,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    // Should have 4 tweets after creating one in post test\n    assert.equal(4, tweets.length);\n    assert.equal(tweets[0].tweetText, 'First Tweet Test');\n    assert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\n    // Delete the first tweet\n    const deleteATweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    request('Delete', deleteATweetUrl);\n    // New list of all tweets after delete\n    const newAllTweetList = JSON.parse(request('GET', allTweetsUrl).getBody('utf8'));\n    assert.equal(3, newAllTweetList.length);\n    assert.equal(newAllTweetList[0].tweetText, 'Second Tweet Test');\n    assert.equal(newAllTweetList[0].tweetDate, '2017-08-31T16:19:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "17896ff4-7b8c-406d-98f3-3c7bfc833432",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all user tweets",
            "fullTitle": "Tweet API tests delete all user tweets",
            "timedOut": false,
            "duration": 1347,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all users\nconst allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\n// Get all tweets of homer id - should have 1 left due to 1 being deleted in delete test above\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(1, tweets.length);\nassert.equal(tweets[0].tweetText, 'Second Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nrequest('DELETE', allUserTweetsUrl);\nres = request('GET', allUserTweetsUrl);\nconst afterDeleteTweets = JSON.parse(res.getBody('utf8'));\nassert.equal(0, afterDeleteTweets.length);",
            "err": {},
            "isRoot": false,
            "uuid": "23528e34-51a5-41a0-b782-be1a729229c3",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all tweets",
            "fullTitle": "Tweet API tests delete all tweets",
            "timedOut": false,
            "duration": 1019,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\n// Should have 2 left due to delete tests and post test\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'Third Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-09-16T20:54:00.000Z');\n// Delete all tweets\nrequest('DELETE', url);\n// Get new list of all tweets\nconst newListOfTweets = JSON.parse(request('GET', url).getBody('utf8'));\nassert.equal(0, newListOfTweets.length);",
            "err": {},
            "isRoot": false,
            "uuid": "a2ed4848-4967-41d8-b83a-b5c865a35f6b",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "\\test\\tweetapitest.js",
        "uuid": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "E:\\dev\\workspaceWebStorm\\enterprise-web-dev-assign1\\test\\tweetapitest.js",
        "passes": [
          {
            "title": "get tweets",
            "fullTitle": "Tweet API tests get tweets",
            "timedOut": false,
            "duration": 343,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(3, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[2].tweetText, 'Third Tweet Test');\nassert.equal(tweets[2].tweetDate, '2017-09-16T20:54:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "61210418-8d52-4981-ac9e-235c1a9fedb3",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one tweet",
            "fullTitle": "Tweet API tests get one tweet",
            "timedOut": false,
            "duration": 682,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    const oneTweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    res = request('GET', oneTweetUrl);\n    const oneTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneTweet.tweetText, 'First Tweet Test');\n    assert.equal(oneTweet.tweetDate, '2017-07-31T22:04:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "53a04df6-0354-4d1a-ac4a-fedea61b2076",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get all user tweets",
            "fullTitle": "Tweet API tests get all user tweets",
            "timedOut": false,
            "duration": 684,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[1].tweetUser, users[0]._id);",
            "err": {},
            "isRoot": false,
            "uuid": "abeaad89-4508-4a2e-a2f5-0eecff49b4d6",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create a tweet",
            "fullTitle": "Tweet API tests create a tweet",
            "timedOut": false,
            "duration": 344,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const tweetsUrl = 'http://localhost:4000/api/tweets';\n    const newTweet = {\n      tweetText: 'Testing Api',\n      tweetDate: '2017-11-01T11:07:00.000Z',\n    };\n    const res = request('POST', tweetsUrl, { json: newTweet });\n    const returnedTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedTweet.tweetText, 'Testing Api');\n    assert.equal(returnedTweet.tweetDate, '2017-11-01T11:07:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "f7eb61e9-6b11-4209-8607-f00f7205634a",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete a tweet",
            "fullTitle": "Tweet API tests delete a tweet",
            "timedOut": false,
            "duration": 1013,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    // Should have 4 tweets after creating one in post test\n    assert.equal(4, tweets.length);\n    assert.equal(tweets[0].tweetText, 'First Tweet Test');\n    assert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\n    // Delete the first tweet\n    const deleteATweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    request('Delete', deleteATweetUrl);\n    // New list of all tweets after delete\n    const newAllTweetList = JSON.parse(request('GET', allTweetsUrl).getBody('utf8'));\n    assert.equal(3, newAllTweetList.length);\n    assert.equal(newAllTweetList[0].tweetText, 'Second Tweet Test');\n    assert.equal(newAllTweetList[0].tweetDate, '2017-08-31T16:19:00.000Z');",
            "err": {},
            "isRoot": false,
            "uuid": "17896ff4-7b8c-406d-98f3-3c7bfc833432",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all user tweets",
            "fullTitle": "Tweet API tests delete all user tweets",
            "timedOut": false,
            "duration": 1347,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all users\nconst allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\n// Get all tweets of homer id - should have 1 left due to 1 being deleted in delete test above\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(1, tweets.length);\nassert.equal(tweets[0].tweetText, 'Second Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nrequest('DELETE', allUserTweetsUrl);\nres = request('GET', allUserTweetsUrl);\nconst afterDeleteTweets = JSON.parse(res.getBody('utf8'));\nassert.equal(0, afterDeleteTweets.length);",
            "err": {},
            "isRoot": false,
            "uuid": "23528e34-51a5-41a0-b782-be1a729229c3",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all tweets",
            "fullTitle": "Tweet API tests delete all tweets",
            "timedOut": false,
            "duration": 1019,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\n// Should have 2 left due to delete tests and post test\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'Third Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-09-16T20:54:00.000Z');\n// Delete all tweets\nrequest('DELETE', url);\n// Get new list of all tweets\nconst newListOfTweets = JSON.parse(request('GET', url).getBody('utf8'));\nassert.equal(0, newListOfTweets.length);",
            "err": {},
            "isRoot": false,
            "uuid": "a2ed4848-4967-41d8-b83a-b5c865a35f6b",
            "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5432,
        "rootEmpty": false
      },
      {
        "title": "User API tests",
        "suites": [],
        "tests": [
          {
            "title": "get users",
            "fullTitle": "User API tests get users",
            "timedOut": false,
            "duration": 341,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/users';\n    const res = request('GET', url);\n    const users = JSON.parse(res.getBody('utf8'));\n    assert.equal(3, users.length);\n    assert.equal(users[0].firstName, 'Homer');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    assert.equal(users[1].firstName, 'Marge');\n    assert.equal(users[1].lastName, 'Simpson');\n    assert.equal(users[1].email, 'marge@simpson.com');\n    assert.equal(users[1].password, 'secret');\n    assert.equal(users[2].firstName, 'Bart');\n    assert.equal(users[2].lastName, 'Simpson');\n    assert.equal(users[2].email, 'bart@simpson.com');\n    assert.equal(users[2].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "2ba804b8-08e2-4ef4-9653-0425b87ab289",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one user",
            "fullTitle": "User API tests get one user",
            "timedOut": false,
            "duration": 676,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    const oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "0b78549c-7eb5-4a07-8c7c-465660022862",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create a user",
            "fullTitle": "User API tests create a user",
            "timedOut": false,
            "duration": 355,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const usersUrl = 'http://localhost:4000/api/users';\n    const newUser = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', usersUrl, { json: newUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Kevin');\n    assert.equal(returnedUser.lastName, 'Fan');\n    assert.equal(returnedUser.email, 'kevintest@email.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "84e87ab5-d5c8-4bc2-ba14-81303f4e8d47",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "update a user",
            "fullTitle": "User API tests update a user",
            "timedOut": false,
            "duration": 1031,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    let oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');\n    oneUser.firstName = 'Update';\n    const updateUserUrl = allUsersUrl + '/' + oneUser._id;\n    res = request('PUT', updateUserUrl, { json: oneUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'homer@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "755b7edd-6658-4bbf-ab3c-c7e06149ee40",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete a user",
            "fullTitle": "User API tests delete a user",
            "timedOut": false,
            "duration": 1024,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(users[0].firstName, 'Update');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAUserUrl = allUsersUrl + '/' + users[0]._id;\n    request('DELETE', deleteAUserUrl);\n    // Get new list of all users\n    const newAllUserList = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(3, newAllUserList.length);\n    assert.equal(newAllUserList[0].firstName, 'Marge');\n    assert.equal(newAllUserList[0].lastName, 'Simpson');\n    assert.equal(newAllUserList[0].email, 'marge@simpson.com');\n    assert.equal(newAllUserList[0].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "9566d8f0-1172-4ff0-b1ef-032b38490958",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all users",
            "fullTitle": "User API tests delete all users",
            "timedOut": false,
            "duration": 1050,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user is currently Marge after deleting Lisa\n    assert.equal(users[0].firstName, 'Marge');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'marge@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete all users\n    request('DELETE', allUsersUrl);\n    // Get new list of all users\n    const newListOfUsers = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(0, newListOfUsers.length);",
            "err": {},
            "isRoot": false,
            "uuid": "d2ae3134-8125-42d1-9df8-9ad29708d1e1",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "\\test\\userapitest.js",
        "uuid": "c6523b98-0204-4f29-b056-d105060b23af",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "E:\\dev\\workspaceWebStorm\\enterprise-web-dev-assign1\\test\\userapitest.js",
        "passes": [
          {
            "title": "get users",
            "fullTitle": "User API tests get users",
            "timedOut": false,
            "duration": 341,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const url = 'http://localhost:4000/api/users';\n    const res = request('GET', url);\n    const users = JSON.parse(res.getBody('utf8'));\n    assert.equal(3, users.length);\n    assert.equal(users[0].firstName, 'Homer');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    assert.equal(users[1].firstName, 'Marge');\n    assert.equal(users[1].lastName, 'Simpson');\n    assert.equal(users[1].email, 'marge@simpson.com');\n    assert.equal(users[1].password, 'secret');\n    assert.equal(users[2].firstName, 'Bart');\n    assert.equal(users[2].lastName, 'Simpson');\n    assert.equal(users[2].email, 'bart@simpson.com');\n    assert.equal(users[2].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "2ba804b8-08e2-4ef4-9653-0425b87ab289",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "get one user",
            "fullTitle": "User API tests get one user",
            "timedOut": false,
            "duration": 676,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    const oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "0b78549c-7eb5-4a07-8c7c-465660022862",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "create a user",
            "fullTitle": "User API tests create a user",
            "timedOut": false,
            "duration": 355,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const usersUrl = 'http://localhost:4000/api/users';\n    const newUser = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', usersUrl, { json: newUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Kevin');\n    assert.equal(returnedUser.lastName, 'Fan');\n    assert.equal(returnedUser.email, 'kevintest@email.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "84e87ab5-d5c8-4bc2-ba14-81303f4e8d47",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "update a user",
            "fullTitle": "User API tests update a user",
            "timedOut": false,
            "duration": 1031,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    let oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');\n    oneUser.firstName = 'Update';\n    const updateUserUrl = allUsersUrl + '/' + oneUser._id;\n    res = request('PUT', updateUserUrl, { json: oneUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'homer@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "755b7edd-6658-4bbf-ab3c-c7e06149ee40",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete a user",
            "fullTitle": "User API tests delete a user",
            "timedOut": false,
            "duration": 1024,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(users[0].firstName, 'Update');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAUserUrl = allUsersUrl + '/' + users[0]._id;\n    request('DELETE', deleteAUserUrl);\n    // Get new list of all users\n    const newAllUserList = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(3, newAllUserList.length);\n    assert.equal(newAllUserList[0].firstName, 'Marge');\n    assert.equal(newAllUserList[0].lastName, 'Simpson');\n    assert.equal(newAllUserList[0].email, 'marge@simpson.com');\n    assert.equal(newAllUserList[0].password, 'secret');",
            "err": {},
            "isRoot": false,
            "uuid": "9566d8f0-1172-4ff0-b1ef-032b38490958",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete all users",
            "fullTitle": "User API tests delete all users",
            "timedOut": false,
            "duration": 1050,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user is currently Marge after deleting Lisa\n    assert.equal(users[0].firstName, 'Marge');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'marge@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete all users\n    request('DELETE', allUsersUrl);\n    // Get new list of all users\n    const newListOfUsers = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(0, newListOfUsers.length);",
            "err": {},
            "isRoot": false,
            "uuid": "d2ae3134-8125-42d1-9df8-9ad29708d1e1",
            "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4477,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 15000,
    "uuid": "ce219d61-2f9a-41d0-be68-42388178a40c",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "get admins",
      "fullTitle": "Admin API tests get admins",
      "timedOut": false,
      "duration": 519,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/admins';\n    const res = request('GET', url);\n    const admins = JSON.parse(res.getBody('utf8'));\n    assert.equal(2, admins.length);\n    assert.equal(admins[0].firstName, 'Admin');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    assert.equal(admins[1].firstName, 'Grandpa');\n    assert.equal(admins[1].lastName, 'Simpson');\n    assert.equal(admins[1].email, 'grandpa@simpson.com');\n    assert.equal(admins[1].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "1a00647e-7e38-4ebb-b119-e572aef8c92a",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one admin",
      "fullTitle": "Admin API tests get one admin",
      "timedOut": false,
      "duration": 708,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "0e49d393-d121-48e9-9ce9-56d74ccdc605",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create an admin",
      "fullTitle": "Admin API tests create an admin",
      "timedOut": false,
      "duration": 356,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const adminsUrl = 'http://localhost:4000/api/admins';\n    const newAdmin = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', adminsUrl, { json: newAdmin });\n    const returnedAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedAdmin.firstName, 'Kevin');\n    assert.equal(returnedAdmin.lastName, 'Fan');\n    assert.equal(returnedAdmin.email, 'kevintest@email.com');\n    assert.equal(returnedAdmin.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "4aec9b9e-0564-4051-8f4e-04516e0a9b84",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "update an admin",
      "fullTitle": "Admin API tests update an admin",
      "timedOut": false,
      "duration": 1065,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');\n    oneAdmin.firstName = 'Update';\n    const updateUserUrl = allAdminsUrl + '/' + oneAdmin._id;\n    res = request('PUT', updateUserUrl, { json: oneAdmin });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'admin@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "5e170330-89ca-4337-94c4-ca007a991f98",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete an admin",
      "fullTitle": "Admin API tests delete an admin",
      "timedOut": false,
      "duration": 1065,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(admins[0].firstName, 'Update');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAnAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    request('DELETE', deleteAnAdminUrl);\n    // Get new list of all users\n    const newAllAdminList = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    // Should have 2 admins remaining due to one created at post test\n    assert.equal(2, newAllAdminList.length);\n    assert.equal(newAllAdminList[0].firstName, 'Grandpa');\n    assert.equal(newAllAdminList[0].lastName, 'Simpson');\n    assert.equal(newAllAdminList[0].email, 'grandpa@simpson.com');\n    assert.equal(newAllAdminList[0].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "f55e8287-432c-4082-a143-b8ccac7f3db7",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all admins",
      "fullTitle": "Admin API tests delete all admins",
      "timedOut": false,
      "duration": 1043,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the admins\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first admin is currently Grandpa after deleting Admin\n    assert.equal(admins[0].firstName, 'Grandpa');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'grandpa@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete all admins\n    request('DELETE', allAdminsUrl);\n    // Get new list of all admins\n    const newListOfAdmins = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    assert.equal(0, newListOfAdmins.length);",
      "err": {},
      "isRoot": false,
      "uuid": "c45e26e7-656c-4e15-ad2d-aa46ecd40540",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get tweets",
      "fullTitle": "Tweet API tests get tweets",
      "timedOut": false,
      "duration": 343,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(3, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[2].tweetText, 'Third Tweet Test');\nassert.equal(tweets[2].tweetDate, '2017-09-16T20:54:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "61210418-8d52-4981-ac9e-235c1a9fedb3",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one tweet",
      "fullTitle": "Tweet API tests get one tweet",
      "timedOut": false,
      "duration": 682,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    const oneTweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    res = request('GET', oneTweetUrl);\n    const oneTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneTweet.tweetText, 'First Tweet Test');\n    assert.equal(oneTweet.tweetDate, '2017-07-31T22:04:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "53a04df6-0354-4d1a-ac4a-fedea61b2076",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get all user tweets",
      "fullTitle": "Tweet API tests get all user tweets",
      "timedOut": false,
      "duration": 684,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[1].tweetUser, users[0]._id);",
      "err": {},
      "isRoot": false,
      "uuid": "abeaad89-4508-4a2e-a2f5-0eecff49b4d6",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create a tweet",
      "fullTitle": "Tweet API tests create a tweet",
      "timedOut": false,
      "duration": 344,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const tweetsUrl = 'http://localhost:4000/api/tweets';\n    const newTweet = {\n      tweetText: 'Testing Api',\n      tweetDate: '2017-11-01T11:07:00.000Z',\n    };\n    const res = request('POST', tweetsUrl, { json: newTweet });\n    const returnedTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedTweet.tweetText, 'Testing Api');\n    assert.equal(returnedTweet.tweetDate, '2017-11-01T11:07:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "f7eb61e9-6b11-4209-8607-f00f7205634a",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete a tweet",
      "fullTitle": "Tweet API tests delete a tweet",
      "timedOut": false,
      "duration": 1013,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    // Should have 4 tweets after creating one in post test\n    assert.equal(4, tweets.length);\n    assert.equal(tweets[0].tweetText, 'First Tweet Test');\n    assert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\n    // Delete the first tweet\n    const deleteATweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    request('Delete', deleteATweetUrl);\n    // New list of all tweets after delete\n    const newAllTweetList = JSON.parse(request('GET', allTweetsUrl).getBody('utf8'));\n    assert.equal(3, newAllTweetList.length);\n    assert.equal(newAllTweetList[0].tweetText, 'Second Tweet Test');\n    assert.equal(newAllTweetList[0].tweetDate, '2017-08-31T16:19:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "17896ff4-7b8c-406d-98f3-3c7bfc833432",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all user tweets",
      "fullTitle": "Tweet API tests delete all user tweets",
      "timedOut": false,
      "duration": 1347,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all users\nconst allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\n// Get all tweets of homer id - should have 1 left due to 1 being deleted in delete test above\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(1, tweets.length);\nassert.equal(tweets[0].tweetText, 'Second Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nrequest('DELETE', allUserTweetsUrl);\nres = request('GET', allUserTweetsUrl);\nconst afterDeleteTweets = JSON.parse(res.getBody('utf8'));\nassert.equal(0, afterDeleteTweets.length);",
      "err": {},
      "isRoot": false,
      "uuid": "23528e34-51a5-41a0-b782-be1a729229c3",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all tweets",
      "fullTitle": "Tweet API tests delete all tweets",
      "timedOut": false,
      "duration": 1019,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\n// Should have 2 left due to delete tests and post test\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'Third Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-09-16T20:54:00.000Z');\n// Delete all tweets\nrequest('DELETE', url);\n// Get new list of all tweets\nconst newListOfTweets = JSON.parse(request('GET', url).getBody('utf8'));\nassert.equal(0, newListOfTweets.length);",
      "err": {},
      "isRoot": false,
      "uuid": "a2ed4848-4967-41d8-b83a-b5c865a35f6b",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get users",
      "fullTitle": "User API tests get users",
      "timedOut": false,
      "duration": 341,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/users';\n    const res = request('GET', url);\n    const users = JSON.parse(res.getBody('utf8'));\n    assert.equal(3, users.length);\n    assert.equal(users[0].firstName, 'Homer');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    assert.equal(users[1].firstName, 'Marge');\n    assert.equal(users[1].lastName, 'Simpson');\n    assert.equal(users[1].email, 'marge@simpson.com');\n    assert.equal(users[1].password, 'secret');\n    assert.equal(users[2].firstName, 'Bart');\n    assert.equal(users[2].lastName, 'Simpson');\n    assert.equal(users[2].email, 'bart@simpson.com');\n    assert.equal(users[2].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "2ba804b8-08e2-4ef4-9653-0425b87ab289",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one user",
      "fullTitle": "User API tests get one user",
      "timedOut": false,
      "duration": 676,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    const oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "0b78549c-7eb5-4a07-8c7c-465660022862",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create a user",
      "fullTitle": "User API tests create a user",
      "timedOut": false,
      "duration": 355,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const usersUrl = 'http://localhost:4000/api/users';\n    const newUser = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', usersUrl, { json: newUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Kevin');\n    assert.equal(returnedUser.lastName, 'Fan');\n    assert.equal(returnedUser.email, 'kevintest@email.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "84e87ab5-d5c8-4bc2-ba14-81303f4e8d47",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "update a user",
      "fullTitle": "User API tests update a user",
      "timedOut": false,
      "duration": 1031,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    let oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');\n    oneUser.firstName = 'Update';\n    const updateUserUrl = allUsersUrl + '/' + oneUser._id;\n    res = request('PUT', updateUserUrl, { json: oneUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'homer@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "755b7edd-6658-4bbf-ab3c-c7e06149ee40",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete a user",
      "fullTitle": "User API tests delete a user",
      "timedOut": false,
      "duration": 1024,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(users[0].firstName, 'Update');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAUserUrl = allUsersUrl + '/' + users[0]._id;\n    request('DELETE', deleteAUserUrl);\n    // Get new list of all users\n    const newAllUserList = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(3, newAllUserList.length);\n    assert.equal(newAllUserList[0].firstName, 'Marge');\n    assert.equal(newAllUserList[0].lastName, 'Simpson');\n    assert.equal(newAllUserList[0].email, 'marge@simpson.com');\n    assert.equal(newAllUserList[0].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "9566d8f0-1172-4ff0-b1ef-032b38490958",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all users",
      "fullTitle": "User API tests delete all users",
      "timedOut": false,
      "duration": 1050,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user is currently Marge after deleting Lisa\n    assert.equal(users[0].firstName, 'Marge');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'marge@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete all users\n    request('DELETE', allUsersUrl);\n    // Get new list of all users\n    const newListOfUsers = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(0, newListOfUsers.length);",
      "err": {},
      "isRoot": false,
      "uuid": "d2ae3134-8125-42d1-9df8-9ad29708d1e1",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "get admins",
      "fullTitle": "Admin API tests get admins",
      "timedOut": false,
      "duration": 519,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/admins';\n    const res = request('GET', url);\n    const admins = JSON.parse(res.getBody('utf8'));\n    assert.equal(2, admins.length);\n    assert.equal(admins[0].firstName, 'Admin');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    assert.equal(admins[1].firstName, 'Grandpa');\n    assert.equal(admins[1].lastName, 'Simpson');\n    assert.equal(admins[1].email, 'grandpa@simpson.com');\n    assert.equal(admins[1].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "1a00647e-7e38-4ebb-b119-e572aef8c92a",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one admin",
      "fullTitle": "Admin API tests get one admin",
      "timedOut": false,
      "duration": 708,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "0e49d393-d121-48e9-9ce9-56d74ccdc605",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create an admin",
      "fullTitle": "Admin API tests create an admin",
      "timedOut": false,
      "duration": 356,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const adminsUrl = 'http://localhost:4000/api/admins';\n    const newAdmin = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', adminsUrl, { json: newAdmin });\n    const returnedAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedAdmin.firstName, 'Kevin');\n    assert.equal(returnedAdmin.lastName, 'Fan');\n    assert.equal(returnedAdmin.email, 'kevintest@email.com');\n    assert.equal(returnedAdmin.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "4aec9b9e-0564-4051-8f4e-04516e0a9b84",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "update an admin",
      "fullTitle": "Admin API tests update an admin",
      "timedOut": false,
      "duration": 1065,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allAdminsUrl = 'http://localhost:4000/api/admins';\n    let res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    const oneAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    res = request('GET', oneAdminUrl);\n    const oneAdmin = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneAdmin.firstName, 'Admin');\n    assert.equal(oneAdmin.lastName, 'Simpson');\n    assert.equal(oneAdmin.email, 'admin@simpson.com');\n    assert.equal(oneAdmin.password, 'secret');\n    oneAdmin.firstName = 'Update';\n    const updateUserUrl = allAdminsUrl + '/' + oneAdmin._id;\n    res = request('PUT', updateUserUrl, { json: oneAdmin });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'admin@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "5e170330-89ca-4337-94c4-ca007a991f98",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete an admin",
      "fullTitle": "Admin API tests delete an admin",
      "timedOut": false,
      "duration": 1065,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(admins[0].firstName, 'Update');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'admin@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAnAdminUrl = allAdminsUrl + '/' + admins[0]._id;\n    request('DELETE', deleteAnAdminUrl);\n    // Get new list of all users\n    const newAllAdminList = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    // Should have 2 admins remaining due to one created at post test\n    assert.equal(2, newAllAdminList.length);\n    assert.equal(newAllAdminList[0].firstName, 'Grandpa');\n    assert.equal(newAllAdminList[0].lastName, 'Simpson');\n    assert.equal(newAllAdminList[0].email, 'grandpa@simpson.com');\n    assert.equal(newAllAdminList[0].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "f55e8287-432c-4082-a143-b8ccac7f3db7",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all admins",
      "fullTitle": "Admin API tests delete all admins",
      "timedOut": false,
      "duration": 1043,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the admins\n    const allAdminsUrl = 'http://localhost:4000/api/admins';\n    const res = request('GET', allAdminsUrl);\n    const admins = JSON.parse(res.getBody('utf8'));\n    // Test first admin is currently Grandpa after deleting Admin\n    assert.equal(admins[0].firstName, 'Grandpa');\n    assert.equal(admins[0].lastName, 'Simpson');\n    assert.equal(admins[0].email, 'grandpa@simpson.com');\n    assert.equal(admins[0].password, 'secret');\n    // Delete all admins\n    request('DELETE', allAdminsUrl);\n    // Get new list of all admins\n    const newListOfAdmins = JSON.parse(request('GET', allAdminsUrl).getBody('utf8'));\n    assert.equal(0, newListOfAdmins.length);",
      "err": {},
      "isRoot": false,
      "uuid": "c45e26e7-656c-4e15-ad2d-aa46ecd40540",
      "parentUUID": "02ab0f3b-3134-4a0b-9f12-54dda67f1dab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get tweets",
      "fullTitle": "Tweet API tests get tweets",
      "timedOut": false,
      "duration": 343,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(3, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[2].tweetText, 'Third Tweet Test');\nassert.equal(tweets[2].tweetDate, '2017-09-16T20:54:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "61210418-8d52-4981-ac9e-235c1a9fedb3",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one tweet",
      "fullTitle": "Tweet API tests get one tweet",
      "timedOut": false,
      "duration": 682,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    const oneTweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    res = request('GET', oneTweetUrl);\n    const oneTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneTweet.tweetText, 'First Tweet Test');\n    assert.equal(oneTweet.tweetDate, '2017-07-31T22:04:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "53a04df6-0354-4d1a-ac4a-fedea61b2076",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get all user tweets",
      "fullTitle": "Tweet API tests get all user tweets",
      "timedOut": false,
      "duration": 684,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'First Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nassert.equal(tweets[1].tweetText, 'Second Tweet Test');\nassert.equal(tweets[1].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[1].tweetUser, users[0]._id);",
      "err": {},
      "isRoot": false,
      "uuid": "abeaad89-4508-4a2e-a2f5-0eecff49b4d6",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create a tweet",
      "fullTitle": "Tweet API tests create a tweet",
      "timedOut": false,
      "duration": 344,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const tweetsUrl = 'http://localhost:4000/api/tweets';\n    const newTweet = {\n      tweetText: 'Testing Api',\n      tweetDate: '2017-11-01T11:07:00.000Z',\n    };\n    const res = request('POST', tweetsUrl, { json: newTweet });\n    const returnedTweet = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedTweet.tweetText, 'Testing Api');\n    assert.equal(returnedTweet.tweetDate, '2017-11-01T11:07:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "f7eb61e9-6b11-4209-8607-f00f7205634a",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete a tweet",
      "fullTitle": "Tweet API tests delete a tweet",
      "timedOut": false,
      "duration": 1013,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allTweetsUrl = 'http://localhost:4000/api/tweets';\n    let res = request('GET', allTweetsUrl);\n    const tweets = JSON.parse(res.getBody('utf8'));\n    // Should have 4 tweets after creating one in post test\n    assert.equal(4, tweets.length);\n    assert.equal(tweets[0].tweetText, 'First Tweet Test');\n    assert.equal(tweets[0].tweetDate, '2017-07-31T22:04:00.000Z');\n    // Delete the first tweet\n    const deleteATweetUrl = allTweetsUrl + '/' + tweets[0]._id;\n    request('Delete', deleteATweetUrl);\n    // New list of all tweets after delete\n    const newAllTweetList = JSON.parse(request('GET', allTweetsUrl).getBody('utf8'));\n    assert.equal(3, newAllTweetList.length);\n    assert.equal(newAllTweetList[0].tweetText, 'Second Tweet Test');\n    assert.equal(newAllTweetList[0].tweetDate, '2017-08-31T16:19:00.000Z');",
      "err": {},
      "isRoot": false,
      "uuid": "17896ff4-7b8c-406d-98f3-3c7bfc833432",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all user tweets",
      "fullTitle": "Tweet API tests delete all user tweets",
      "timedOut": false,
      "duration": 1347,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all users\nconst allUsersUrl = 'http://localhost:4000/api/users';\nlet res = request('GET', allUsersUrl);\nconst users = JSON.parse(res.getBody('utf8'));\n// Get all tweets of homer id - should have 1 left due to 1 being deleted in delete test above\nconst allUserTweetsUrl = 'http://localhost:4000/api/tweets/users/' + users[0]._id;\nres = request('GET', allUserTweetsUrl);\nconst tweets = JSON.parse(res.getBody('utf8'));\nassert.equal(1, tweets.length);\nassert.equal(tweets[0].tweetText, 'Second Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-08-31T16:19:00.000Z');\nassert.equal(tweets[0].tweetUser, users[0]._id);\nrequest('DELETE', allUserTweetsUrl);\nres = request('GET', allUserTweetsUrl);\nconst afterDeleteTweets = JSON.parse(res.getBody('utf8'));\nassert.equal(0, afterDeleteTweets.length);",
      "err": {},
      "isRoot": false,
      "uuid": "23528e34-51a5-41a0-b782-be1a729229c3",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all tweets",
      "fullTitle": "Tweet API tests delete all tweets",
      "timedOut": false,
      "duration": 1019,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/tweets';\nconst res = request('GET', url);\nconst tweets = JSON.parse(res.getBody('utf8'));\n// Should have 2 left due to delete tests and post test\nassert.equal(2, tweets.length);\nassert.equal(tweets[0].tweetText, 'Third Tweet Test');\nassert.equal(tweets[0].tweetDate, '2017-09-16T20:54:00.000Z');\n// Delete all tweets\nrequest('DELETE', url);\n// Get new list of all tweets\nconst newListOfTweets = JSON.parse(request('GET', url).getBody('utf8'));\nassert.equal(0, newListOfTweets.length);",
      "err": {},
      "isRoot": false,
      "uuid": "a2ed4848-4967-41d8-b83a-b5c865a35f6b",
      "parentUUID": "721ca4ed-5aad-41bd-8ad3-c8167cde229b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get users",
      "fullTitle": "User API tests get users",
      "timedOut": false,
      "duration": 341,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const url = 'http://localhost:4000/api/users';\n    const res = request('GET', url);\n    const users = JSON.parse(res.getBody('utf8'));\n    assert.equal(3, users.length);\n    assert.equal(users[0].firstName, 'Homer');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    assert.equal(users[1].firstName, 'Marge');\n    assert.equal(users[1].lastName, 'Simpson');\n    assert.equal(users[1].email, 'marge@simpson.com');\n    assert.equal(users[1].password, 'secret');\n    assert.equal(users[2].firstName, 'Bart');\n    assert.equal(users[2].lastName, 'Simpson');\n    assert.equal(users[2].email, 'bart@simpson.com');\n    assert.equal(users[2].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "2ba804b8-08e2-4ef4-9653-0425b87ab289",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "get one user",
      "fullTitle": "User API tests get one user",
      "timedOut": false,
      "duration": 676,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    const oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "0b78549c-7eb5-4a07-8c7c-465660022862",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "create a user",
      "fullTitle": "User API tests create a user",
      "timedOut": false,
      "duration": 355,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const usersUrl = 'http://localhost:4000/api/users';\n    const newUser = {\n      firstName: 'Kevin',\n      lastName: 'Fan',\n      email: 'kevintest@email.com',\n      password: 'secret',\n    };\n    const res = request('POST', usersUrl, { json: newUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Kevin');\n    assert.equal(returnedUser.lastName, 'Fan');\n    assert.equal(returnedUser.email, 'kevintest@email.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "84e87ab5-d5c8-4bc2-ba14-81303f4e8d47",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "update a user",
      "fullTitle": "User API tests update a user",
      "timedOut": false,
      "duration": 1031,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const allUsersUrl = 'http://localhost:4000/api/users';\n    let res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    const oneUserUrl = allUsersUrl + '/' + users[0]._id;\n    res = request('GET', oneUserUrl);\n    let oneUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(oneUser.firstName, 'Homer');\n    assert.equal(oneUser.lastName, 'Simpson');\n    assert.equal(oneUser.email, 'homer@simpson.com');\n    assert.equal(oneUser.password, 'secret');\n    oneUser.firstName = 'Update';\n    const updateUserUrl = allUsersUrl + '/' + oneUser._id;\n    res = request('PUT', updateUserUrl, { json: oneUser });\n    const returnedUser = JSON.parse(res.getBody('utf8'));\n    assert.equal(returnedUser.firstName, 'Update');\n    assert.equal(returnedUser.lastName, 'Simpson');\n    assert.equal(returnedUser.email, 'homer@simpson.com');\n    assert.equal(returnedUser.password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "755b7edd-6658-4bbf-ab3c-c7e06149ee40",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete a user",
      "fullTitle": "User API tests delete a user",
      "timedOut": false,
      "duration": 1024,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user name is currently Update Simpson due to put test\n    assert.equal(users[0].firstName, 'Update');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'homer@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete the first user - Homer\n    const deleteAUserUrl = allUsersUrl + '/' + users[0]._id;\n    request('DELETE', deleteAUserUrl);\n    // Get new list of all users\n    const newAllUserList = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(3, newAllUserList.length);\n    assert.equal(newAllUserList[0].firstName, 'Marge');\n    assert.equal(newAllUserList[0].lastName, 'Simpson');\n    assert.equal(newAllUserList[0].email, 'marge@simpson.com');\n    assert.equal(newAllUserList[0].password, 'secret');",
      "err": {},
      "isRoot": false,
      "uuid": "9566d8f0-1172-4ff0-b1ef-032b38490958",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete all users",
      "fullTitle": "User API tests delete all users",
      "timedOut": false,
      "duration": 1050,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Get all the users\n    const allUsersUrl = 'http://localhost:4000/api/users';\n    const res = request('GET', allUsersUrl);\n    const users = JSON.parse(res.getBody('utf8'));\n    // Test first user is currently Marge after deleting Lisa\n    assert.equal(users[0].firstName, 'Marge');\n    assert.equal(users[0].lastName, 'Simpson');\n    assert.equal(users[0].email, 'marge@simpson.com');\n    assert.equal(users[0].password, 'secret');\n    // Delete all users\n    request('DELETE', allUsersUrl);\n    // Get new list of all users\n    const newListOfUsers = JSON.parse(request('GET', 'http://localhost:4000/api/users').getBody('utf8'));\n    assert.equal(0, newListOfUsers.length);",
      "err": {},
      "isRoot": false,
      "uuid": "d2ae3134-8125-42d1-9df8-9ad29708d1e1",
      "parentUUID": "c6523b98-0204-4f29-b056-d105060b23af",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}